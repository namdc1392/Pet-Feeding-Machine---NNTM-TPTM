#include <HX711.h>
#include <Servo.h>

// Loadcell
#define DT 3
#define SCK 2

// Servo
#define SERVO_PIN 10
#define SERVO_OPEN_ANGLE 90
#define SERVO_CLOSE_ANGLE 0

// HX711 v√† Servo
HX711 scale;
Servo feederServo;

// Ng∆∞·ª°ng ƒëi·ªÅu ki·ªán
#define SCALE_FACTOR 420.0  // Hi·ªáu chu·∫©n th·ª±c t·∫ø
#define LOWER_THRESHOLD 30.0  // < 30g ‚Üí m·ªü
#define UPPER_THRESHOLD 60.0  // > 60g ‚Üí ƒë√≥ng

// Tr·∫°ng th√°i servo hi·ªán t·∫°i
bool isServoOpen = false;

void setup() {
  Serial.begin(9600);

  scale.begin(DT, SCK);
  scale.set_scale(SCALE_FACTOR);
  scale.tare();

  feederServo.attach(SERVO_PIN);
  feederServo.write(SERVO_CLOSE_ANGLE);  // ban ƒë·∫ßu ƒë√≥ng
  isServoOpen = false;

  Serial.println("üöÄ H·ªá th·ªëng b·∫Øt ƒë·∫ßu...");
}

void loop() {
  float weight = scale.get_units(10);  // l·∫•y trung b√¨nh 10 l·∫ßn ƒë·ªçc

  Serial.print("Kh·ªëi l∆∞·ª£ng hi·ªán t·∫°i (g): ");
  Serial.println(weight, 1);

  // N·∫øu nh·ªè h∆°n 30g ‚Üí m·ªü n·∫øu ch∆∞a m·ªü
  if (weight < LOWER_THRESHOLD && !isServoOpen) {
    Serial.println("‚ö†Ô∏è Tr·ªçng l∆∞·ª£ng th·∫•p! M·ªü servo.");
    feederServo.write(SERVO_OPEN_ANGLE);
    isServoOpen = true;

  // N·∫øu l·ªõn h∆°n 60g ‚Üí ƒë√≥ng n·∫øu ch∆∞a ƒë√≥ng
  } else if (weight > UPPER_THRESHOLD && isServoOpen) {
    Serial.println("‚úÖ Tr·ªçng l∆∞·ª£ng ƒë·ªß. ƒê√≥ng servo.");
    feederServo.write(SERVO_CLOSE_ANGLE);
    isServoOpen = false;
  }

  delay(300);  // ch·ªù tr∆∞·ªõc khi ƒë·ªçc l·∫°i
}
